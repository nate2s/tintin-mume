#alias {mapreload} {
	#map {read} {maps/arda.map};
	#map {goto} {1};
	#echo {Map file reloaded.};
	notSynced
}

#alias {mapsave} {
	#map {write} {maps/arda.map};
	#echo {Map file saved.}
}

#alias {rnote} {
	#regex {%0} {^{\d+}%*$} {
		#var {tmpRoomVnum} {&1};
		#var {tmpNote} {@strip{&2}}
	}
	{
		#if {"$isSynced" == "false"} {
			#var {tmpRoomVnum} {notSynced}
		};
		#else {
			#map {get} {roomvnum} {tmpRoomVnum}
		};
		#var {tmpNote} {@strip{%0}}
	};
	#if {"$tmpRoomVnum" == "notSynced"} {
		#echo {Mapper not synced. Either 'sync' the map or provide a roomID as first argument.}
	};
	#elseif {!@isvnum{$tmpRoomVnum}} {
		#echo {Invalid room ID.}
	};
	#elseif {"$tmpNote" == "none"} {
		#map {set} {roomnote} {} {$tmpRoomVnum};
		#echo {Note in room %s deleted.} {$tmpRoomVnum}
	};
	#elseif {"$tmpNote" != ""} {
		#map {set} {roomnote} {$tmpNote} {$tmpRoomVnum};
		#echo {Note in room %s now set to '%s'.} {$tmpRoomVnum} {$tmpNote}
	};
	#else {
		#var {tmpNote} {};
		#map {get} {roomnote} {tmpNote} {$tmpRoomVnum};
		#if {"$tmpNote" != ""} {
			#echo {Room %s has note '%s'.} {$tmpRoomVnum} {$tmpNote}
		};
		#else {
			#echo {No note has been defined for room %s.} {$tmpRoomVnum}
		}
	};
	#unvar {tmpRoomVnum};
	#unvar {tmpNote}
}

#alias {notSynced} {
	unrun SILENT;
	#if {"$isSynced" == "true"} {
		#echo {Map no longer synced!};
		#var {isSynced} {false}
	}
}

#alias {rinfo} {
	#format {tmpLocation} {%p} {%0};
	#regex {$tmpLocation} {^%d$} {#map {at} {&1} {#map {info}}} {#map {info}};
	#unvar {tmpLocation}
}

#alias {run} {
	#var {tmpLocation} {@strip{%0}};
	#if {"$tmpLocation" == "c"} {
		#if {"$lastDestination" != ""} {
			#path {load} {};
			#echo {Recalculating...};
			#regex {$lastDestination} {^%d$} {#map {find} {&1}} {#map {find} {%*%i$lastDestination%*}};
			#var {isRunning} {true};
			#path {walk} {forward}
		};
		#else {
			#echo {No previous destination defined.}
		}
	};
	#elseif {"%1" == "n"} {
		#if {"%2" != ""} {
			#var {tmpResults} {@maplist{{note}{%2}}};
			#list {tmpResults} {create} {$tmpResults[]};
			#if {&tmpResults[] == 1} {
				#path {load} {};
				#echo {Starting trip.};
				#var {lastDestination} {$tmpResults[1]};
				#map {find} {$lastDestination};
				#var {isRunning} {true};
				#path {walk} {forward}
			};
			#elseif {&tmpResults[] == 0} {
				#echo {There are no rooms with the note '%2' in the database.}
			};
			#else {
				#echo {Error: more than one room contains the note '%2'.}
			};
			#unvar {tmpResults}
		};
		#else {
			#echo {You need to supply some note text to find.}
		}
	};
	#elseif {"$tmpLocation" != ""} {
		#regexp {$tmpLocation} {^%d$} {} {#var {tmpLocation} {%*%i$tmpLocation%*}};
		#var {tmpResults} {@maplist{{name}{$tmpLocation}}};
		#list {tmpResults} {create} {$tmpResults[]};
		#if {&tmpResults[] == 1} {
			#path {load} {};
			#echo {Starting trip.};
			#var {lastDestination} {$tmpResults[1]};
			#map {find} {$lastDestination};
			#var {isRunning} {true};
			#path {walk} {forward}
		};
		#elseif {&tmpResults[] == 0} {
			#echo {There are no rooms with the name '%0' in the database.}
		};
		#else {
			#echo {Error: more than one room name contains '%0'.}
		};
		#unvar {tmpResults}
	};
	#else {
		#echo {Syntax: run [n[ note]|c|room ID|room name] - run from your current location to room. If 'c' is given, the previous route (if any) will be recalculated and continued. If 'n' and some text are given, the destination will be set to the room which has a note matching text. Use the unrun command to cancel the running.}
	};
	#unvar {tmpLocation}
}

#alias {unrun} {
	#if {"%1" != "SILENT"} {
		#echo {Canceling route!}
	};
	#path {load} {};
	#var {isRunning} {false}
}

#alias {rfind} {
	#format {tmpLocation} {%p} {%0};
	#list {tmpLength} {tokenize} {$tmpLocation};
	#if {"$tmpLocation" == ""} {
		#echo {Syntax: rfind [c|room name] - Performs a fuzzy search for a room name. If 'c' is specified instead of a room name, will search for the room name that was last captured from the mud. (room name is case insensitive.)}
	};
	#elseif {"$tmpLocation" == "c"} {
		#map {list} {$roomName}
	};
	#elseif {&tmpLength[] <= 3} {
		#echo {Error: String must be at least 4 characters long.}
	};
	#else {
		#map {list} {%*%i$tmpLocation%*}
	};
	#unvar {tmpLength};
	#unvar {tmpLocation}
}

#alias {sync} {
	#if {"$roomName" != ""} {
		#var {tmpResults} {@maplist{{name}{$roomName}}};
		#if {&tmpResults[] == 1} {
			#echo {Syncing to room with name '%s'.} {$roomName};
			#var {isSynced} {true};
			#map goto $roomName
		};
		#else {
			#echo {Unable to Sync: more than 1 room in the map has the name '%s'.} {$roomName}
		};
		#unvar {tmpResults}
	};
	#else {
		#echo {Error: roomName variable is empty.}
	}
}

#nop canceled movement patterns
#action {^You cannot ride there.$} {unrun SILENT}
#action {^Your boat cannot enter this place.$} {unrun SILENT}
#action {^A guard steps in front of you.$} {unrun SILENT}
#action {^The clerk bars your way.$} {unrun SILENT}
#action {^You cannot go that way...$} {unrun SILENT}
#action {^Alas, you cannot go that way...$} {unrun SILENT}
#action {^You need to swim to go there.$} {unrun SILENT}
#action {^You failed swimming there.$} {unrun SILENT}
#action {^You failed to climb there and fall down, hurting yourself.$} {unrun SILENT}
#action {^Your mount cannot climb the tree!$} {unrun SILENT}
#action {^No way! You are fighting for your life!$} {unrun SILENT}
#action {^In your dreams, or what?$} {unrun SILENT}
#action {^You are too exhausted.$} {unrun SILENT}
#action {^You unsuccessfully try to break through the ice.$} {unrun SILENT}
#action {^Your mount refuses to follow your orders!$} {unrun SILENT}
#action {^You are too exhausted to ride.$} {unrun SILENT}
#action {^You can't go into deep water!$} {unrun SILENT}
#action {^You don't control your mount!$} {unrun SILENT}
#action {^Your mount is too sensible to attempt such a feat.$} {unrun SILENT}
#action {^Scouting in that direction is impossible.$} {unrun SILENT}
#action {^Scouting {north|south|east|west|up|down}wards is too difficult.$} {unrun SILENT}
#action {^Oops! You cannot go there riding!$} {unrun SILENT}
#action {^A {pony|dales-pony|horse|warhorse|pack horse|trained horse|horse of the Rohirrim|brown donkey|mountain mule|hungry warg|brown wolf}{( \(\w\))?} is too exhausted.$} {unrun SILENT}
#action {^You'd better be swimming if you want to dive underwater.$} {unrun SILENT}
#action {^You need to climb to go there.$} {unrun SILENT}
#action {^You cannot climb there.$} {unrun SILENT}
#action {^If you still want to try, you must 'climb' there.$} {unrun SILENT}
#action { {prevents|keeps} you from going {north|south|east|west|up|down|upstairs|downstairs|past (him|her|it)}.$} {unrun SILENT}
#action {^Nah... You feel too relaxed to do that.$} {
	unrun SILENT;
	#send {stand}
}
#action {^Maybe you should get on your feet first?$} {
	unrun SILENT;
	#send {stand}
}

#nop Forced unknown movement
#action {^#MAP: Unable to move to undefined exit!$} {
	notSynced;
	#line {gag}
}
#action {^You can't seem to escape the roots!$} {notSynced}
#action {^You are borne along by a strong current.$} {notSynced}
#action {^You feel confused and move along randomly...$} {notSynced}
#action {^You are swept away by the current.$} {notSynced}
#action {^You are swept away by the powerful current of water.$} {notSynced}
#action {^You board the ferry.$} {notSynced}
#action {^You bend close to the ground, seeking the path to Rivendell...$} {notSynced}
#action {^You are dead! Sorry...$} {notSynced}
#action {^With a jerk, the basket starts gliding down the rope towards the platform.$} {notSynced}
#action {^You cannot control your mount on the slanted and unstable surface! You begin to slide to the north, and plunge toward the water below!$} {notSynced}
#action {^The current pulls you faster. Suddenly, you are sucked downwards into darkness!$} {notSynced}
#action {^You are washed blindly over the rocks, and plummet sickeningly downwards...$} {notSynced}
#action {^You stop moving towards the {left|right} bank and drift downstream.$} {notSynced}
#action {^Oops! You walk off the bridge and fall into the rushing water below!$} {notSynced}
#action {^Holding your breath and with closed eyes, you are squeezed below the surface of the water.$} {notSynced}
#action {^Stepping on the lizard corpses, you use some depressions in the wall for support, push the muddy ceiling apart and climb out of the cave.$} {notSynced}

#nop Forced resync
#action {^Suddenly an explosion of ancient rhymes makes the space collapse around you!$} {#delay {0.15} {sync}}
#action {^The pain stops, your vision clears, and you realize that you are elsewhere.$} {#delay {0.15} {sync}}
#action {^A guard leads you out of the house.$} {#delay {0.15} {sync}}
#action {^You leave the ferry.$} {#delay {0.15} {sync}}
#action {^You reached the riverbank.$} {#delay {0.15} {sync}}
#action {^At last Rivendell is within sight!$} {sync}

#nop When the Mume server says the character has moved
#action {^MOVEMENT:%1:MOVEMENT$} {
	#if {("%1"!="") && ("$isSynced" == "true")} {
		#regexp {%1} {{north|south|east|west|up|down}} {#map move %1} {#echo {Unhandled direction: '%1'};notSynced}
	};
	#else {
		notSynced
	};
	#line {gag}
}

#nop Store the current room name
#action {~^NAME:%1:NAME$} {
	#echo {%s} {%1};
	#line {strip} {
		#if {("%1" == "You just see a dense fog around you...") || ("%1" == "It is pitch black...")} {
			#var {roomName} {}
		};
		#else {
			#var {roomName} {%1}
		}
	};
	#if {"$isRunning" == "true"} {
		#path {walk} {forward}
	};
	#line {gag}
}

#nop Store the room description for possible future use
#action {~^DESCRIPTION:%1:DESCRIPTION$} {
	#echo {%s} {%1};
	#line {strip} {#var {roomDesc} {%1}};
	#line {gag}
}

#event {END OF PATH} {
	#delay {destinationReached} {#echo {You have reached your destination.}} {0.75};
	#path {load} {};
	#var {isRunning} {false}
}

#var {roomName} {}
#var {lastDestination} {}
#var {isRunning} {false}
#var {isSynced} {false}
